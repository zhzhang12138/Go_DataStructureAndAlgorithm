package main

import "fmt"

/*
递归
	递归就是函数/方法自己调用自己，每次调用时传入不同的变量，递归有助于编程者解决复杂的问题，同时可以让代码变得简洁。
递归用于解决什么样的问题
	(1)各种数学问题：8皇后问题、汉诺塔、阶乘问题，迷宫问题，球和篮子的问题(google编程大赛)
	(2)将用栈解决的问题--->递归代码比较简洁
递归需要遵守的重要原则
	(1)执行一个函数时，就创建一个新的受保护的独立空间(新函数栈)
	(2)函数的局部变量是独立的，不会相互影响，如果希望各个函数栈使用同一个数据，使用引用传递
	(3)递归必须向推出递归的条件逼近[程序员必须自己分析]，否则就是无限递归，死归了
	(4)当一个函数执行完毕，或者遇到return，就会返回，遵守谁调用，就将结果返回给谁，
		同时当函数执行完毕或者返回时，该函数本身也会被系统销毁。
*/

func test(n int) {
	if n > 2 {
		n--
		test(n)
	}
	fmt.Println("n=", n)
}

func test2(n int) {
	if n > 2 {
		n--
		test(n)
	} else {
		fmt.Println("n=", n)

	}
}

func main() {
	n := 4
	//test(n)
	//fmt.Println(n)
	test2(n)

}
